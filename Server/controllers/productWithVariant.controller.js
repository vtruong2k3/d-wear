const Product = require("../models/products");
const Variant = require("../models/variants");
const {
  productValidate,
  variantValidate,
} = require("../validate/productValidate");

// L·∫•y t·∫•t c·∫£ s·∫£n ph·∫©m c√πng bi·∫øn th·ªÉ
exports.getAllProductWithVariants = async (req, res) => {
  try {
    const products = await Product.find();
    const result = [];

    for (const product of products) {
      const variants = await Variant.find({ product_id: product._id });
      result.push({ product, variants });
    }

    return res.status(200).json(result);
  } catch (error) {
    return res.status(500).json({
      message: "L·ªói server khi l·∫•y danh s√°ch s·∫£n ph·∫©m",
      error: error.message,
    });
  }
};

// L·∫•y chi ti·∫øt 1 s·∫£n ph·∫©m theo ID c√πng v·ªõi bi·∫øn th·ªÉ
exports.getProductWithVariantsById = async (req, res) => {
  try {
    const { id } = req.params;

    const product = await Product.findById(id);
    if (!product) {
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m" });
    }

    const variants = await Variant.find({ product_id: id });

    return res.status(200).json({ product, variants });
  } catch (error) {
    return res
      .status(500)
      .json({ message: "L·ªói server khi l·∫•y s·∫£n ph·∫©m", error: error.message });
  }
};

// T·∫°o s·∫£n ph·∫©m c√πng v·ªõi c√°c bi·∫øn th·ªÉ
// T·∫°o s·∫£n ph·∫©m c√πng v·ªõi c√°c bi·∫øn th·ªÉ
exports.createProductWithVariants = async (req, res) => {
  try {
    // L·∫•y file ·∫£nh
    const productImages = req.files?.productImage || [];
    const variantImages = req.files?.imageVariant || [];

    // Map ƒë∆∞·ªùng d·∫´n ·∫£nh
    const imageUrls = productImages.map((file) => file.path);

    // ‚úÖ Debug: ki·ªÉm tra file th·ª±c s·ª± nh·∫≠n ƒë∆∞·ª£c
    console.log("FILES:", req.files);
    console.log("imageUrls:", imageUrls);

    // N·∫øu kh√¥ng c√≥ ·∫£nh th√¨ b√°o l·ªói ngay
    if (!imageUrls || imageUrls.length === 0) {
      return res.status(400).json({
        message: "D·ªØ li·ªáu s·∫£n ph·∫©m kh√¥ng h·ª£p l·ªá",
        errors: ["Ph·∫£i c√≥ √≠t nh·∫•t 1 ·∫£nh."],
      });
    }

    // L·∫•y d·ªØ li·ªáu bi·∫øn th·ªÉ t·ª´ req.body
    let variantsData = [];
    try {
      variantsData = JSON.parse(req.body.variants || "[]");
    } catch (err) {
      return res.status(400).json({
        message: "D·ªØ li·ªáu bi·∫øn th·ªÉ kh√¥ng h·ª£p l·ªá",
        errors: ["Tr∆∞·ªùng 'variants' ph·∫£i l√† chu·ªói JSON h·ª£p l·ªá."],
      });
    }

    // G√°n ·∫£nh v√†o t·ª´ng bi·∫øn th·ªÉ
    variantsData.forEach((variant, idx) => {
      variant.image = variantImages[idx] ? [variantImages[idx].path] : [];
    });

    // G√°n imageUrls v√†o body ƒë·ªÉ validate
    req.body.imageUrls = imageUrls;

    // ‚úÖ Validate s·∫£n ph·∫©m
    const { error: productError } = productValidate.createProduct.validate(
      req.body,
      {
        abortEarly: false,
      }
    );
    if (productError) {
      const errors = productError.details.map((err) => err.message);
      return res
        .status(400)
        .json({ message: "D·ªØ li·ªáu s·∫£n ph·∫©m kh√¥ng h·ª£p l·ªá", errors });
    }

    // ‚úÖ Validate t·ª´ng bi·∫øn th·ªÉ
    for (const variant of variantsData) {
      // Th√™m product_id t·∫°m ƒë·ªÉ pass validation
      variant.product_id = "temp";

      const { error: variantError } = variantValidate.create.validate(variant, {
        abortEarly: false,
      });
      if (variantError) {
        const errors = variantError.details.map((err) => err.message);
        return res
          .status(400)
          .json({ message: "D·ªØ li·ªáu bi·∫øn th·ªÉ kh√¥ng h·ª£p l·ªá", errors });
      }
    }

    // T·∫°o s·∫£n ph·∫©m
    const {
      product_name,
      description,
      basePrice,
      brand_id,
      category_id,
      gender,
      material,
    } = req.body;

    const newProduct = await Product.create({
      product_name,
      description,
      basePrice,
      imageUrls,
      brand_id,
      category_id,
      gender,
      material,
    });

    // T·∫°o bi·∫øn th·ªÉ (g√°n product_id th·∫≠t)
    const variantsWithProductId = variantsData.map((variant) => ({
      ...variant,
      product_id: newProduct._id,
    }));

    const createdVariants = await Variant.insertMany(variantsWithProductId);

    return res.status(201).json({
      message: "T·∫°o s·∫£n ph·∫©m v√† bi·∫øn th·ªÉ th√†nh c√¥ng",
      product: newProduct,
      variants: createdVariants,
    });
  } catch (error) {
    return res.status(500).json({
      message: "L·ªói server khi t·∫°o s·∫£n ph·∫©m v√† bi·∫øn th·ªÉ",
      error: error.message,
    });
  }
};
// C·∫≠p nh·∫≠t s·∫£n ph·∫©m c√πng v·ªõi bi·∫øn th·ªÉ
exports.updateProductWithVariants = async (req, res) => {
  const { id } = req.params;

  try {
    // Ki·ªÉm tra s·∫£n ph·∫©m t·ªìn t·∫°i
    const product = await Product.findById(id);
    if (!product) {
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m" });
    }

    // G·ªôp ·∫£nh c≈© v√† m·ªõi c·ªßa s·∫£n ph·∫©m
    const existingImageUrls =
      typeof req.body.existingImageUrls === "string"
        ? [req.body.existingImageUrls]
        : req.body.existingImageUrls || [];

    const newImages = req.files?.productImage?.map((file) => file.path) || [];
    const fullImageUrls = [...existingImageUrls, ...newImages];
    req.body.imageUrls = fullImageUrls;

    // ‚úÖ 1. Validate s·∫£n ph·∫©m
    const { error: productError } = productValidate.updateProduct.validate(
      req.body,
      {
        abortEarly: false,
      }
    );
    if (productError) {
      const errors = productError.details.map((err) => err.message);
      return res
        .status(400)
        .json({ message: "D·ªØ li·ªáu s·∫£n ph·∫©m kh√¥ng h·ª£p l·ªá", errors });
    }

    // ‚úÖ 2. Parse & validate bi·∫øn th·ªÉ
    let variantsData = [];
    try {
      variantsData = JSON.parse(req.body.variants || "[]");
    } catch (err) {
      return res.status(400).json({
        message: "D·ªØ li·ªáu bi·∫øn th·ªÉ kh√¥ng h·ª£p l·ªá",
        errors: ["Tr∆∞·ªùng 'variants' ph·∫£i l√† chu·ªói JSON h·ª£p l·ªá."],
      });
    }

    console.log("üì¶ Danh s√°ch bi·∫øn th·ªÉ g·ª≠i l√™n:", variantsData);

    const variantImages = req.files?.imageVariant || [];

    // Validate t·ª´ng bi·∫øn th·ªÉ
    for (let i = 0; i < variantsData.length; i++) {
      const variant = variantsData[i];

      // ‚úÖ G√°n ·∫£nh ƒë√∫ng
      if (Array.isArray(variantImages) && variantImages[i]) {
        variant.image = [variantImages[i].path]; // ·∫£nh m·ªõi
      } else if (Array.isArray(variant.image)) {
        variant.image = variant.image.map((fileName) =>
          fileName.includes("uploads")
            ? fileName
            : `uploads/products/${fileName}`
        ); // gi·ªØ ·∫£nh c≈©
      } else {
        variant.image = [];
      }

      variant.product_id = id;

      const isUpdate = variant._id && typeof variant._id === "string";
      const schema = isUpdate ? variantValidate.update : variantValidate.create;

      if (!schema || typeof schema.validate !== "function") {
        return res.status(500).json({
          message: "Schema validate cho bi·∫øn th·ªÉ kh√¥ng h·ª£p l·ªá.",
        });
      }

      // ‚úÖ Debug bi·∫øn th·ªÉ ƒëang validate
      console.log(`üß© ƒêang validate bi·∫øn th·ªÉ th·ª© ${i + 1}:`);
      console.log("‚ñ∂Ô∏è D·ªØ li·ªáu bi·∫øn th·ªÉ:", variant);

      const { error: variantError } = schema.validate(variant, {
        abortEarly: false,
      });

      if (variantError) {
        console.log("‚ùå L·ªói validate bi·∫øn th·ªÉ:", variantError.details);
        const errors = variantError.details.map((err) => err.message);
        return res.status(400).json({
          message: `D·ªØ li·ªáu bi·∫øn th·ªÉ th·ª© ${i + 1} kh√¥ng h·ª£p l·ªá`,
          errors,
        });
      }
    }

    // ‚úÖ 3. N·∫øu h·ª£p l·ªá ‚Üí c·∫≠p nh·∫≠t DB

    // 3.1 Update s·∫£n ph·∫©m
    const {
      product_name,
      description,
      basePrice,
      brand_id,
      category_id,
      gender,
      material,
    } = req.body;

    const updatedProduct = await Product.findByIdAndUpdate(
      id,
      {
        product_name,
        description,
        basePrice,
        imageUrls: fullImageUrls,
        brand_id,
        category_id,
        gender,
        material,
      },
      { new: true }
    );

    // 3.2 Update bi·∫øn th·ªÉ
    const incomingVariantIds = [];

    for (let i = 0; i < variantsData.length; i++) {
      const variant = variantsData[i];
      const isUpdate = variant._id && typeof variant._id === "string";

      if (isUpdate) {
        await Variant.findByIdAndUpdate(variant._id, variant);
        incomingVariantIds.push(variant._id);
      } else {
        const exists = await Variant.findOne({
          product_id: id,
          size: variant.size,
          color: variant.color,
        });

        if (exists) {
          incomingVariantIds.push(exists._id);
          continue;
        }

        const created = await Variant.create({ ...variant, product_id: id });
        incomingVariantIds.push(created._id);
      }
    }

    // 3.3 Xo√° bi·∫øn th·ªÉ kh√¥ng c√≤n trong danh s√°ch m·ªõi
    await Variant.deleteMany({
      product_id: id,
      _id: { $nin: incomingVariantIds },
    });

    const updatedVariants = await Variant.find({ product_id: id });

    return res.status(200).json({
      message: "C·∫≠p nh·∫≠t s·∫£n ph·∫©m v√† bi·∫øn th·ªÉ th√†nh c√¥ng",
      product: updatedProduct,
      variants: updatedVariants,
    });
  } catch (error) {
    console.error("‚ùå L·ªói c·∫≠p nh·∫≠t:", error);
    return res.status(500).json({
      message: "L·ªói server khi c·∫≠p nh·∫≠t s·∫£n ph·∫©m v√† bi·∫øn th·ªÉ",
      error: error.message,
    });
  }
};

// Xo√° s·∫£n ph·∫©m c√πng bi·∫øn th·ªÉ
exports.deleteProductWithVariants = async (req, res) => {
  const { id } = req.params;
  try {
    const deletedProduct = await Product.findByIdAndDelete(id);
    if (!deletedProduct) {
      return res.status(404).json({ message: "S·∫£n ph·∫©m kh√¥ng t·ªìn t·∫°i" });
    }

    await Variant.deleteMany({ product_id: id });

    return res.status(200).json({
      message: "Xo√° s·∫£n ph·∫©m v√† to√†n b·ªô bi·∫øn th·ªÉ th√†nh c√¥ng",
      product: deletedProduct,
    });
  } catch (error) {
    return res
      .status(500)
      .json({ message: "L·ªói server khi xo√°", error: error.message });
  }
};
