const OrderItem = require("../models/orderItems");
const Order = require("../models/orders");

const { getIO } = require("../sockets/socketManager");
const Voucher = require("../models/vouchers");
const sendOrderConfirmationEmail = require("../utils/sendEmail");
const { generateOrderCode } = require("../utils/orderCode");
const Cart = require("../models/carts");
const Variant = require("../models/variants");
const { createOrderSchema } = require("../validate/orderValidate");
const sendOrderCancellationEmail = require("../utils/sendOrderCancellationEmail");
exports.cancelOrder = async (req, res) => {
  try {
    const order_id = req.params.id;
    const userId = req.user.id;
    const { reason } = req.body;

    const order = await Order.findById(order_id).lean();

    if (!order) {
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng" });
    }

    if (order.user_id.toString() !== userId) {
      return res.status(403).json({
        message: "B·∫°n kh√¥ng c√≥ quy·ªÅn h·ªßy ƒë∆°n h√†ng n√†y",
      });
    }

    // C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng
    const updatedOrder = await Order.findByIdAndUpdate(
      order_id,
      {
        status: "cancelled",
        cancellationReason: reason,
        updatedAt: new Date(),
      },
      { new: true }
    ).lean();

    // üîç L·∫•y danh s√°ch s·∫£n ph·∫©m t·ª´ OrderItem
    const orderItems = await OrderItem.find({ order_id })
      .populate("product_id", "product_name")
      .populate("variant_id", "size color image")
      .lean();

    // üõ† Chu·∫©n ho√° danh s√°ch item ƒë·ªÉ g·ª≠i email
    const items = orderItems.map((item) => {
      const variant = item.variant_id;
      const product = item.product_id;

      const rawImage = Array.isArray(variant?.image)
        ? variant.image[0]
        : variant?.image;
      const imagePath = rawImage?.replace(/\\/g, "/");
      const fullImageUrl = imagePath
        ? `https://a85ff2e29d03.ngrok-free.app/${imagePath}`
        : "";

      return {
        name: product?.product_name || "S·∫£n ph·∫©m",
        image: fullImageUrl,
        color: variant?.color || "-",
        size: variant?.size || "-",
        quantity: item.quantity,
        price: item.price,
      };
    });
    // Emit socket
    const io = getIO();
    io.to(order_id).emit("cancelOrder", {
      orderId: order_id,
      status: updatedOrder.status,
      cancellationReason: updatedOrder.cancellationReason,
      updatedAt: updatedOrder.updatedAt,
    });

    const email = order.email || req.user.email;

    // üì® G·ª≠i email hu·ª∑ ƒë∆°n h√†ng
    try {
      await sendOrderCancellationEmail(email, {
        ...updatedOrder,
        items, // danh s√°ch s·∫£n ph·∫©m t·ª´ OrderItem
        receiverName: order.receiverName,
        phone: order.phone,
        shippingAddress: order.shippingAddress,
        paymentMethod: order.paymentMethod,
        finalAmount: order.finalAmount,
        createdAt: order.createdAt,
      });
    } catch (mailErr) {
      console.error("L·ªói khi g·ª≠i email hu·ª∑ ƒë∆°n h√†ng:", mailErr.message);
    }

    res.status(200).json({
      message: "H·ªßy ƒë∆°n h√†ng th√†nh c√¥ng",
      order: updatedOrder,
    });
  } catch (error) {
    console.error("L·ªói khi h·ªßy ƒë∆°n h√†ng:", error.message);
    return res.status(500).json({
      message: "Server Error",
      error: error.message,
    });
  }
};

exports.updateOrderStatus = async (req, res) => {
  try {
    const { id } = req.params;
    const { status: newStatus } = req.body;

    if (!newStatus) {
      return res.status(400).json({ message: "Tr·∫°ng th√°i l√† b·∫Øt bu·ªôc" });
    }

    const order = await Order.findById(id);
    if (!order) {
      return res.status(404).json({ message: "ƒê∆°n h√†ng kh√¥ng t·ªìn t·∫°i" });
    }

    const currentStatus = order.status;

    //  C√°c tr·∫°ng th√°i ƒë∆∞·ª£c ph√©p chuy·ªÉn ti·∫øp
    const validTransitions = {
      pending: ["processing", "cancelled"],
      processing: ["shipped", "cancelled"],
      shipped: ["delivered"],
      delivered: [],
      cancelled: [],
    };

    const allowedStatuses = validTransitions[currentStatus] || [];

    if (!allowedStatuses.includes(newStatus)) {
      return res.status(400).json({
        message: `Kh√¥ng th·ªÉ chuy·ªÉn tr·∫°ng th√°i t·ª´ "${currentStatus}" sang "${newStatus}"`,
      });
    }

    //  C·∫≠p nh·∫≠t tr·∫°ng th√°i
    order.status = newStatus;
    await order.save();

    //  G·ª≠i socket ƒë·ªÉ client c·∫≠p nh·∫≠t real-time
    const io = getIO();
    io.to(id).emit("orderStatusUpdate", {
      orderId: id,
      status: newStatus,
      updatedAt: new Date().toISOString(),
    });

    return res.json({
      message: "C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng th√†nh c√¥ng",
      orderId: id,
      status: newStatus,
    });
  } catch (error) {
    console.error("‚ùå L·ªói khi c·∫≠p nh·∫≠t tr·∫°ng th√°i:", error.message);
    return res.status(500).json({
      message: "L·ªói server",
      error: error.message,
    });
  }
};

exports.getAllOrder = async (req, res) => {
  try {
    const result = await Order.find().sort({ createdAt: -1 }).lean();

    return res.status(200).json({
      message: "L·∫•y t·∫•t c·∫£ ƒë∆°n h√†ng th√†nh c√¥ng",
      orders: result,
    });
  } catch (error) {
    console.error("‚ùå L·ªói khi l·∫•y t·∫•t c·∫£ ƒë∆°n h√†ng:", error.message);
    return res.status(500).json({
      message: "Server Error",
      error: error.message,
    });
  }
};
exports.getOrderById = async (req, res) => {
  try {
    const orderId = req.params.id;
    const userId = req.user.id;

    // L·∫•y ƒë∆°n h√†ng theo id
    const order = await Order.findById(orderId).lean();

    if (!order) {
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng" });
    }

    // N·∫øu l√† user th√¨ kh√¥ng ƒë∆∞·ª£c xem ƒë∆°n h√†ng c·ªßa ng∆∞·ªùi kh√°c
    if (order.user_id.toString() !== userId && !req.user.isAdmin) {
      return res.status(403).json({ message: "Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p" });
    }

    // L·∫•y chi ti·∫øt s·∫£n ph·∫©m trong ƒë∆°n
    const orderItems = await OrderItem.find({ order_id: orderId })
      .populate("product_id", "product_name imageUrls")
      .populate("variant_id", "size color")
      .lean();

    return res.status(200).json({
      message: "L·∫•y chi ti·∫øt ƒë∆°n h√†ng th√†nh c√¥ng",
      order,
      orderItems,
    });
  } catch (error) {
    console.error("‚ùå L·ªói getOrderById:", error.message);
    return res.status(500).json({
      message: "Server Error",
      error: error.message,
    });
  }
};
exports.getOrderByIdAdmin = async (req, res) => {
  try {
    const orderId = req.params.id;

    // L·∫•y ƒë∆°n h√†ng theo id
    const order = await Order.findById(orderId).lean();

    if (!order) {
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng" });
    }

    // L·∫•y chi ti·∫øt s·∫£n ph·∫©m trong ƒë∆°n
    const orderItems = await OrderItem.find({ order_id: orderId })
      .populate("product_id", "product_name imageUrls")
      .populate("variant_id", "size color")
      .lean();

    return res.status(200).json({
      message: "L·∫•y chi ti·∫øt ƒë∆°n h√†ng th√†nh c√¥ng",
      order,
      orderItems,
    });
  } catch (error) {
    console.error("‚ùå L·ªói getOrderById:", error.message);
    return res.status(500).json({
      message: "Server Error",
      error: error.message,
    });
  }
};
exports.getAllByIdUser = async (req, res) => {
  try {
    const userId = req.user.id;

    if (!userId) {
      return res.status(400).json({ message: "Kh√¥ng c√≥ User" });
    }
    const result = await Order.find({ user_id: userId })
      .sort({
        createdAt: -1,
      })
      .lean();
    return res.status(200).json({
      message: "L·∫•y ƒë∆°n h√†ng th√†nh c√¥ng",
      orders: result,
    });
  } catch (error) {
    console.error("‚ùå L·ªói khi t·∫°o ƒë∆°n h√†ng:", error.message);
    return res.status(500).json({
      message: "Server Error",
      error: error.message,
    });
  }
};

exports.createOrder = async (req, res) => {
  try {
    const { error } = createOrderSchema.validate(req.body, {
      abortEarly: false,
    });
    if (error) {
      return res.status(400).json({
        message: "D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá",
        details: error.details.map((err) => err.message),
      });
    }

    const {
      user_id,
      items,
      voucher_id,
      paymentMethod,
      receiverName,
      shippingAddress,
      phone,
      note,
      email,
    } = req.body;

    const emailUser = email || req.user?.email;
    const userId = req.user?.id || user_id;

    if (!userId || !items || items.length === 0) {
      return res
        .status(400)
        .json({ message: "Thi·∫øu th√¥ng tin ƒë∆°n h√†ng ho·∫∑c ng∆∞·ªùi d√πng." });
    }

    // T√≠nh t·ªïng gi√° tr·ªã ƒë∆°n h√†ng
    let total = 0;
    items.forEach((item) => {
      total += item.price * item.quantity;
    });

    let discount = 0;

    if (voucher_id) {
      const voucher = await Voucher.findById(voucher_id);

      if (!voucher || !voucher.isActive) {
        return res
          .status(400)
          .json({ message: "Voucher kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ b·ªã v√¥ hi·ªáu h√≥a." });
      }

      const now = new Date();
      if (now < voucher.startDate || now > voucher.endDate) {
        return res
          .status(400)
          .json({ message: "Voucher hi·ªán kh√¥ng c√≤n hi·ªáu l·ª±c." });
      }

      const alreadyUsed = voucher.usedUsers?.some(
        (usedId) => usedId.toString() === userId.toString()
      );
      if (alreadyUsed) {
        return res
          .status(400)
          .json({ message: "B·∫°n ƒë√£ s·ª≠ d·ª•ng voucher n√†y r·ªìi." });
      }

      if (voucher.maxUser > 0 && voucher.maxUser <= 0) {
        return res
          .status(400)
          .json({ message: "Voucher ƒë√£ h·∫øt l∆∞·ª£t s·ª≠ d·ª•ng." });
      }

      if (total < voucher.minOrderValue) {
        return res.status(400).json({
          message: `ƒê∆°n h√†ng ph·∫£i ƒë·∫°t t·ªëi thi·ªÉu ${voucher.minOrderValue.toLocaleString()}‚Ç´ ƒë·ªÉ √°p d·ª•ng voucher.`,
        });
      }

      if (voucher.discountType === "percentage") {
        discount = (total * voucher.discountValue) / 100;
        if (voucher.maxDiscountValue > 0) {
          discount = Math.min(discount, voucher.maxDiscountValue);
        }
      } else {
        discount = voucher.discountValue;
      }

      // C·∫≠p nh·∫≠t voucher
      await Voucher.findByIdAndUpdate(voucher_id, {
        $inc: { maxUser: -1 },
        $addToSet: { usedUsers: userId },
      });
    }

    const finalAmount = total - discount;

    // T·∫°o Order
    const newOrder = await Order.create({
      user_id: userId,
      order_code: generateOrderCode(),
      voucher_id: voucher_id || null,
      total,
      email: emailUser,
      discount,
      finalAmount,
      paymentMethod,
      receiverName,
      shippingAddress,
      phone,
      note,
    });

    // T·∫°o OrderItems
    const orderItemIds = [];

    await Promise.all(
      items.map(async (item) => {
        const orderItem = await OrderItem.create({
          order_id: newOrder._id,
          product_id: item.product_id,
          variant_id: item.variant_id,
          quantity: item.quantity,
          price: item.price,
        });
        orderItemIds.push(orderItem._id);
      })
    );

    newOrder.orderItems = orderItemIds;
    await newOrder.save();

    // Xo√° item kh·ªèi gi·ªè h√†ng
    await Cart.deleteMany({
      user_id: user_id,
      variant_id: { $in: items.map((item) => item.variant_id) },
    });
    console.log("üóë ƒê√£ xo√° c√°c bi·∫øn th·ªÉ kh·ªèi gi·ªè h√†ng.");

    // C·∫≠p nh·∫≠t t·ªìn kho
    await Promise.all(
      items.map(async (item) => {
        const updated = await Variant.findOneAndUpdate(
          { _id: item.variant_id, stock: { $gte: item.quantity } },
          { $inc: { stock: -item.quantity } }
        );

        if (!updated) {
          throw new Error(
            `Bi·∫øn th·ªÉ s·∫£n ph·∫©m ${item.variant_id} kh√¥ng ƒë·ªß t·ªìn kho`
          );
        }
      })
    );

    // G·ª≠i email
    // G·ª≠i email x√°c nh·∫≠n ƒë∆°n h√†ng (c√≥ danh s√°ch s·∫£n ph·∫©m)
    try {
      if (emailUser) {
        // L·∫•y danh s√°ch OrderItems v√† populate variant + product
        const orderItems = await OrderItem.find({
          order_id: newOrder._id,
        }).populate({
          path: "variant_id",
          populate: {
            path: "product_id",
            select: "product_name", // L·∫•y t√™n s·∫£n ph·∫©m
          },
        });

        // T·∫°o danh s√°ch s·∫£n ph·∫©m chi ti·∫øt ƒë·ªÉ g·ª≠i qua email
        const populatedItems = orderItems.map((item) => {
          const variant = item.variant_id;
          const product = variant?.product_id;
          const rawImage = Array.isArray(variant?.image)
            ? variant.image[0]
            : variant?.image;
          const imagePath = rawImage?.replace(/\\/g, "/");
          const fullImageUrl = imagePath
            ? `https://a85ff2e29d03.ngrok-free.app/${imagePath}`
            : "";

          console.log("Full image URL:", fullImageUrl);

          return {
            name: product?.product_name || "S·∫£n ph·∫©m",
            image: fullImageUrl,
            color: variant?.color || "-",
            size: variant?.size || "-",
            quantity: item.quantity,
            price: item.price,
          };
        });

        // G·ª≠i email x√°c nh·∫≠n ƒë∆°n h√†ng v·ªõi danh s√°ch s·∫£n ph·∫©m
        await sendOrderConfirmationEmail(emailUser, {
          ...newOrder.toObject(),
          items: populatedItems,
        });
      }
    } catch (emailError) {
      console.error(" G·ª≠i email th·∫•t b·∫°i:", emailError.message);
    }

    // Emit socket
    const io = getIO();
    io.to("admin").emit("newOrder", { orders: newOrder });
    io.to("user").emit("newOrder", { orders: newOrder });

    return res.status(201).json({
      message: "T·∫°o ƒë∆°n h√†ng th√†nh c√¥ng",
      order: newOrder,
    });
  } catch (error) {
    return res.status(500).json({
      message: "Server Error",
      error: error.message,
    });
  }
};
